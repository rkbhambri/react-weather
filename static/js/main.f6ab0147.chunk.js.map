{"version":3,"sources":["components/Header/Header.js","components/Layout/Layout.js","helpers/miscellenous.js","components/NoDataFound/NoDataFound.js","components/Input/Input.js","components/Search/Search.js","components/Content/CityDetails/CityDetails.js","components/Content/Content.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Layout","children","isObjectEmpty","obj","Object","keys","length","getTemperatureInCelsius","temperature","NoDataFound","text","Input","maxLength","type","placeholder","id","value","onChange","event","inputChangeHandler","Search","search","target","CityDetails","details","city","weather","name","country","list","main","temp","clouds","description","maxTemp","temp_max","minTemp","temp_min","pressure","humidity","seaLevel","sea_level","wind","speed","currentDate","Date","getDay","getDate","getMonth","getCurrentDate","toFixed","Content","useState","suggestions","setSuggestions","cityDetails","setCityDetails","searchCity","func","wait","immediate","timeout","context","this","args","arguments","later","apply","callNow","clearTimeout","setTimeout","debounce","item","suggestionsData","trim","cityList","filter","toLowerCase","slice","map","key","onClick","cityId","fetch","then","response","json","data","style","color","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6ab0147.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = (props) => {\n    return (\n        <div className=\"header\">\n            <p>React Weather</p>\n        </div>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport Header from '../Header/Header';\n\nconst Layout = (props) => {\n    return (\n        <div className=\"layout h-100\">\n            <Header />\n            {props.children}\n        </div>\n    );\n};\n\nexport default Layout;\n","\nexport const parseData = (data) => {\n    return JSON.parse(JSON.stringify(data));\n};\n\nexport const isNull = (value) => {\n    return value === null;\n};\n\nexport const validateValues = (value) => {\n    var regex = /^[a-zA-Z0-9!@#$%^&*)(. _-]{0,16}$/;\n    return regex.test(value);\n};\n\nexport const getItem = (key) => {\n    return localStorage.getItem(key);\n};\nexport const setItem = (key, value) => {\n    return localStorage.setItem(key, value);\n};\n\nexport const validateEmail = (email) => {\n    let isEmailValid = false;\n    let regex = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n    if (email.trim() !== '' && regex.test(email)) {\n        isEmailValid = true;\n    }\n    return isEmailValid;\n};\n\nexport const validatePassword = (password) => {\n    let isPasswordValid = false;\n    let regex = /^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9\\S]+)$/;\n    if (password.trim() !== '' && regex.test(password)) {\n        isPasswordValid = true;\n    }\n    return isPasswordValid;\n};\n\n\nexport const isObjectEmpty = (obj) => {\n    return Object.keys(obj).length === 0;\n};\n\nexport const isEmpty = (item) => {\n    if (typeof item === 'number') {\n        return false;\n    }\n    return item.trim() === '';\n};\n\nexport const isArrayNotEmpty = (arr) => {\n    return arr.length > 0;\n};\n\nexport const isArrayEmpty = (arr) => {\n    return arr.length === 0;\n};\n\nexport const indexOf = (arr, value) => {\n    return arr.indexOf(value);\n};\n\nexport const isBoolean = (value) => {\n    return typeof value === \"boolean\";\n};\n\nexport const isNumber = (value) => {\n    return typeof value === \"number\";\n};\n\nexport const isString = (value) => {\n    return typeof value === \"string\";\n};\n\nexport const deleteItem = (array, id) => {\n    const updatedData = array.filter(item => item !== id);\n    return updatedData;\n};\n\nexport const isIncludes = (array, value) => {\n    return array.includes(value);\n};\n\nexport const debounce = (func, wait, immediate) => {\n    var timeout;\n\n    return function executedFunction() {\n        var context = this;\n        var args = arguments;\n\n        var later = function () {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n\n        var callNow = immediate && !timeout;\n\n        clearTimeout(timeout);\n\n        timeout = setTimeout(later, wait);\n\n        if (callNow) func.apply(context, args);\n    };\n};\n\nexport const getCurrentDate = () => {\n    const months = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'Nocvember',\n        'December',\n    ];\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const currentDate = new Date();\n    const date = `${days[currentDate.getDay()]} ${currentDate.getDate()} ${\n        months[currentDate.getMonth()]\n        }`;\n    return date;\n};\n\nexport const getTemperatureInCelsius = (temperature) => {\n    return temperature - 273.15;\n}\n\n","import React from 'react';\n\nconst NoDataFound = (props) => {\n    return (\n        <h2 className=\"h-75 d-flex align-items-center justify-content-center\">\n            {props.text}\n        </h2>\n    );\n};\n\nexport default NoDataFound;\n","import React from 'react';\n// import './Input.css';\n\nconst Input = (props) => {\n    return (\n        <input\n            className=\"form-control\"\n            maxLength={props.maxLength}\n            type={props.type}\n            placeholder={props.placeholder}\n            id={props.id}\n            value={props.value}\n            onChange={(event) => props.inputChangeHandler(event)} />\n    );\n};\n\nexport default Input;\n","import React from 'react';\nimport Input from '../Input/Input';\n\nconst Search = (props) => {\n    return (\n        <form className=\"input-group\">\n            <Input\n                type=\"search\"\n                placeholder={props.placeholder}\n                inputChangeHandler={(event) => props.search(event.target.value)}\n            />\n        </form>\n    );\n};\n\nexport default Search;\n","import React from 'react';\nimport { getCurrentDate, getTemperatureInCelsius } from '../../../helpers/miscellenous';\nimport './CityDetails.css';\n\nconst CityDetails = (props) => {\n    const details = {\n        city: props.weather.city.name,\n        country: props.weather.city.country,\n        temperature: props.weather.list[0].main.temp,\n        clouds: props.weather.list[0].weather[0].description,\n        maxTemp: props.weather.list[0].main.temp_max,\n        minTemp: props.weather.list[0].main.temp_min,\n        pressure: props.weather.list[0].main.pressure,\n        humidity: props.weather.list[0].main.humidity,\n        seaLevel: props.weather.list[0].main.sea_level,\n        wind: props.weather.list[0].wind.speed,\n    };\n    return (\n        <div className=\"city-weather-details col-12\">\n            <h2>{details.city}, {details.country}</h2>\n            <h4>{getCurrentDate()}</h4>\n            <div className=\"row mt-4\">\n                <div className=\"col-md-4 col-12\">\n                    <h1>{getTemperatureInCelsius(details.temperature).toFixed()}<sup>o</sup><br /></h1>\n                    <h3 className=\"text-capitalize\">{details.clouds}</h3>\n                </div>\n                <div className=\"col-md-8 col-12 weather-details border\">\n                    <div className=\"row\">\n                        <h3 className=\"max-temperature col-md-4 col-6 mt-3 text-center\">\n                            {getTemperatureInCelsius(details.maxTemp).toFixed()}<sup>o</sup><br />\n                            High\n                        </h3>\n                        <h3 className=\"min-temperature col-md-4 col-6 mt-3 text-center\">\n                            {getTemperatureInCelsius(details.minTemp).toFixed()}<sup>o</sup><br />\n                            Low\n                        </h3>\n                        <h3 className=\"pressure-temperature col-md-4 col-6 mt-3 text-center\">\n                            {details.pressure}<br />\n                            Pressure\n                        </h3>\n                        <h3 className=\"humidity col-md-4 col-6 mt-3 text-center\">\n                            {details.humidity} %<br />\n                            Humidity\n                        </h3>\n                        <h3 className=\"sea-level col-md-4 col-6 mt-3 text-center\">\n                            {details.seaLevel} m<br />\n                            Sea Level\n                        </h3>\n                        <h3 className=\"wind col-md-4 col-6 mt-3 text-center\">\n                            {details.wind} mph<br />\n                            Wind\n                        </h3>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default CityDetails;","import React, { useState } from 'react';\nimport { debounce, isObjectEmpty, isEmpty } from '../../helpers/miscellenous';\nimport cityList from '../../city-list.json';\nimport NoDataFound from '../NoDataFound/NoDataFound';\nimport Search from '../Search/Search';\nimport CityDetails from './CityDetails/CityDetails';\n\nconst Content = (props) => {\n\n    const [suggestions, setSuggestions] = useState([]);\n    const [cityDetails, setCityDetails] = useState({});\n\n    const searchCity = debounce((value) => {\n        let suggestionsData = [];\n        if (!isEmpty(value)) {\n            suggestionsData = cityList.filter((item) => {\n                return item.name.toLowerCase().search(value.toLowerCase()) !== -1;\n            });\n        }\n\n        setSuggestions(suggestionsData.slice(0, 5));\n    }, 1000);\n\n    const getWeatherDetails = (cityId) => {\n        fetch(`http://api.openweathermap.org/data/2.5/forecast?id=${cityId}&appid=ff5d084541aac5b27ef0f46c449da8ca`)\n            .then(response => {\n                return response.json();\n            })\n            .then(data => {\n                setCityDetails(data);\n                setSuggestions([]);\n            })\n    };\n\n    return (\n        <div className=\"content h-100 pt-5 col-md-10 col-12 offset-md-1 pb-3\">\n            <div className=\"search-city col-md-6 offset-md-3\">\n                <Search placeholder={'Search City'} search={(value) => searchCity(value)} />\n                <div className=\"suggestions\">\n                    {\n                        suggestions.map(item => {\n                            return (\n                                <div\n                                    className=\"font-weight-bold border-left border-right border-bottom p-3\"\n                                    key={item.id}\n                                    onClick={() => getWeatherDetails(item.id)}\n                                    style={{ color: '#ccc' }}>\n                                    {item.name}, {item.country}\n                                </div>\n                            );\n                        })\n                    }\n                </div>\n            </div><br /><br />\n            {!isObjectEmpty(cityDetails) && <CityDetails weather={cityDetails} />}\n            {isObjectEmpty(cityDetails) && <NoDataFound text=\"No City Selected. Please select city\" />}\n        </div>\n    );\n};\n\nexport default Content;\n","import React from 'react';\nimport Layout from './components/Layout/Layout';\nimport Content from './components/Content/Content';\n\nconst App = (props) => {\n    return (\n        <div className=\"app h-100\">\n            <Layout>\n                <Content />\n            </Layout>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}